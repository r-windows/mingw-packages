name: main

on:
  push:
    paths:
      - 'mingw-w64-*/*'
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        include: [
          { msystem: mingw64 },
          { msystem: mingw32 }
        ]
      fail-fast: false
    defaults:
      run:
        shell: msys2 {0}
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: git
          update: true

      - name: CI-Build
        run: MINGW_INSTALLS=${{ matrix.msystem }} ./ci-build.sh
        env:
          BUILD_URL: dummy
          DEPLOY_PROVIDER: bintray
          BINTRAY_TARGET: rtools
          BINTRAY_REPOSITORY: ${{ matrix.msystem }}
          PACMAN_REPOSITORY: ${{ matrix.msystem }}
          BINTRAY_PACKAGE: ${{ matrix.msystem }}

      - name: "Upload binary package"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.msystem }}
          path: artifacts/

      - name: "Upload source package"
        uses: actions/upload-artifact@v2
        with:
          name: sources
          path: sourcepkg/
  deploy:
    name: Deploy to staging server
    runs-on: ubuntu-20.04
    needs: [build]
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - name: Get artifacts for deployment
        uses: actions/download-artifact@v2
      - id: deployment
        name: Uploading files
        run: |
          ls -ltrR
          echo ${STAGINGKEY} > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
          echo 'put -pr .' | sftp "${STAGINGUSER}@ftp.opencpu.org:/rtools"
          rm -f ~/.ssh/id_rsa
        env:
          STAGINGUSER: ${{ secrets.STAGINGUSER }}
          STAGINGKEY: ${{ secrets.STAGINGKEY }}
